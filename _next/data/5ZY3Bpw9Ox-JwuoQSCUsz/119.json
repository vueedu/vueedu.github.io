{"pageProps":{"data":{"id":1165,"clientId":"450","clientName":null,"courseId":"119","typeId":"2","isSpecail":0,"title":"Rust系统开发高级实验班","type":3,"coverUrl":"https://ssl.cdn.maodouketang.com/Fg6LwzzzVxO630YWGMe1LlSU6j26","teacher":null,"startAt":null,"location":"北京","info":"{\"title\":\"企业展示区\",\"desc\":\"深圳北鲲云计算有限公司是一家专注于为有高算力需求的用户提供一站式Cloud-HPC产品和服务的高新技术企业。北鲲云拥有全球领先的Cloud-HPC SaaS平台，核心成员来自于Oracle、爱立信、IBM、华为等国际知名企业，拥有丰富的研发和企业服务管理经验。\",\"qrcodeTitle\":\"北鲲云计算诚招 Rust开发工程师<br/>20-40K*16薪（坐标深圳）\",\"qrcodeTitleLink\":\"https://www.lagou.com/wn/jobs/9922919.html\",\"qrcodeURL\":\"https://maodou-courseware-1257797626.cos.ap-beijing.myqcloud.com/origin/100041120/rust_qrcode.png\", \"mainScreenBgUrl\":\"https://ssl.cdn.maodouketang.com/FhIO5mgDwZcaZT3_LYzaEFDk_X3L\",\"mainScreenQrUrl\":\"https://rustedu.com/\"}","buyersCount":null,"price":"3600","tag":"hot","totalNum":null,"createdAt":null,"updatedAt":null,"roomId":"100450119","isDelete":1,"courseIndex":19,"oldPrice":"3600","ishd":240,"status":null,"summary":"Rust内存安全详解，语法难点解析，设计模式再分析，Rust并发编程，Rust异步编程等内容，适合用Rust从事系统开发的工程师深度学习","showqr":null,"introduction":"<h2><br></h2><h2><span style=\"color: rgb(51, 51, 51);\">﻿讲师介绍：</span></h2><p><span class=\"ql-size-large\" style=\"color: rgb(51, 51, 51);\">任成珺老师：超过20年研发经验，大型通信设备，网络设备软件研发团队负责人，架构师，熟练使用C/C++, Rust开发语言，参与过Rust Arm Cotex-M适配项目。</span></p><p><br></p><p><span class=\"ql-size-large\">作者开源著作《</span><a href=\"https://github.com/Warrenren/inside-rust-std-library\" rel=\"noopener noreferrer\" target=\"_blank\" class=\"ql-size-large\" style=\"background-color: rgb(255, 255, 255);\">inside-rust-std-library</a><span class=\"ql-size-large\"> 》：https://github.com/Warrenren/inside-rust-std-library （</span><span class=\"ql-size-large\" style=\"color: rgb(51, 51, 51);\">github超250星项目</span><span class=\"ql-size-large\">）</span></p><p><br></p><p><br></p><p><br></p><h2><span style=\"color: rgb(51, 51, 51);\">RUST难点详解：</span></h2><p><span class=\"ql-size-large\" style=\"color: rgb(51, 51, 51);\">1.RUST的裸指针：只有掌握了指针，才能认为对C编程登堂入室。RUST与C类似，只有掌握了裸指针，才可以被认为能够用RUST作一些复杂工程编程。本课程将对RUST的裸指针进行详细的分析，包括：</span></p><p><br></p><ul><li><span class=\"ql-size-large\">类型系统与内存的关系及相互转换，裸指针是内存与类型系统转换的媒介</span></li><li><span class=\"ql-size-large\"> 引用与裸指针的区别</span></li><li><span class=\"ql-size-large\"> 内存安全的元凶-内存与类型系统的相互转换；裸指针与野指针</span></li><li><span class=\"ql-size-large\"> 裸指针的常用方法 </span></li></ul><p><span class=\"ql-size-large\" style=\"color: rgb(51, 51, 51);\">2. RUST的所有权/借用/生命周期高级课题：从代码细节了解所有权/借用/生命周期的坑，及应用的原则</span></p><ul><li><span class=\"ql-size-large\"> 所有权转移的内存操作本质</span></li><li><span class=\"ql-size-large\"> 标准库中的若干代码的所有权处理细节及分析</span></li><li><span class=\"ql-size-large\"> 从mem::replace看RUST对所有权处理的原则，理解所有权与drop的联动</span></li><li><span class=\"ql-size-large\"> 借用与生命周期的类型关系，不同的生命周期变量赋值的生命周期强制类型转换规则，RUST的子类和父类</span></li><li><span class=\"ql-size-large\"> 由裸指针直接生成的借用的生命周期使用原则</span></li></ul><p><span class=\"ql-size-large\" style=\"color: rgb(51, 51, 51);\">3. 内部可变性类型Cell&lt;T&gt;, UnsafeCell&lt;T&gt;, RefCell&lt;T&gt; 实现详解</span></p><p><span class=\"ql-size-large\">4. 泛型与trait约束深入认识：</span></p><ul><li><span class=\"ql-size-large\">RUST与泛型不可分割，与其他语言形成对比</span></li><li><span class=\"ql-size-large\"> 泛型的一般到特殊的规则</span></li><li><span class=\"ql-size-large\"> 基于trait的类型系统强大的行为扩展性及良好的模块设计</span></li><li><span class=\"ql-size-large\"> trait约束及dyn Trait的不同使用场景</span></li><li><span class=\"ql-size-large\"> trait强制使用组合，规避继承的设计理念</span></li></ul><p><span class=\"ql-size-large\">5. 对引用作为match变量的分析：</span></p><p><span class=\"ql-size-large\">6. 自动解引用与类型推断结合实例分析</span></p><p><br></p><h2><span style=\"color: rgb(51, 51, 51);\">案例：状态设计模式分析：</span></h2><p><span class=\"ql-size-large\" style=\"color: rgb(51, 51, 51);\">1.</span><span style=\"color: rgb(51, 51, 51);\"> </span><span style=\"color: rgb(51, 51, 51);\" class=\"ql-size-large\">状态变化图</span></p><p><span class=\"ql-size-large\" style=\"color: rgb(51, 51, 51);\">2.</span><span style=\"color: rgb(51, 51, 51);\"> </span><span style=\"color: rgb(51, 51, 51);\" class=\"ql-size-large\">单元结构体与状态模式</span></p><p><span class=\"ql-size-large\" style=\"color: rgb(51, 51, 51);\">3.</span><span style=\"color: rgb(51, 51, 51);\"> </span><span style=\"color: rgb(51, 51, 51);\" class=\"ql-size-large\">状态寄托的结构体</span></p><p><span class=\"ql-size-large\" style=\"color: rgb(51, 51, 51);\">4.</span><span style=\"color: rgb(51, 51, 51);\"> </span><span style=\"color: rgb(51, 51, 51);\" class=\"ql-size-large\">《RUST权威指南》教材当中的问题</span></p><p><br></p><h2>项目实践</h2><p><span class=\"ql-size-large\" style=\"color: rgb(51, 51, 51);\">1.</span><span style=\"color: rgb(51, 51, 51);\"> </span><span style=\"color: rgb(51, 51, 51);\" class=\"ql-size-large\">数组排序编程：给出一个泛型数组[T;N]，及泛型大小比较的函数指针Fn(&amp;T, &amp;T) -&gt; bool，编写快速排序算法对数组进行排序——因为RUST自身的特性，数组排序实际非常考验对RUST语言的理解，需要深刻理解RUST泛型概念，切片类型方法，unsafe rust的使用，裸指针及方法，内存模块方法，并理解所有权的本质。在这些的基础上排序算法也是对编码的一个好的训练。</span></p><p><span class=\"ql-size-large\" style=\"color: rgb(51, 51, 51);\">2.</span><span style=\"color: rgb(51, 51, 51);\"> </span><span style=\"color: rgb(51, 51, 51);\" class=\"ql-size-large\">字符串转换数字：给出数字的进制，扫描一个字符串，将字符串中的数字都找出并打印出来，数字有正负，也可能是具有小数点的浮点数，要求使用设计模式的状态设计模式。——本例主要集中在如何用RUST完成良好的程序结构设计，要设计良好的抽象结构表示不同的进制。分析可能的状态，设计状态的Trait。利用状态的转换得到数字。</span></p><p><br></p><p><br></p><p><br></p><h2><span style=\"color: rgb(51, 51, 51);\">RUST并发编程：</span></h2><p><span class=\"ql-size-large\">1. CPU是单核的时候应用程序异步编程的通用框架模型</span></p><ul><li><span class=\"ql-size-large\">操作系统的同步与异步，阻塞详解</span></li><li><span class=\"ql-size-large\">异步事件总结</span></li><li><span class=\"ql-size-large\">异步编程的框架</span></li></ul><p><span class=\"ql-size-large\">2. 单核CPU启动异步事件框架也适合多线程的程序模型</span></p><p><span class=\"ql-size-large\">3. 多核CPU带来的多线程/并发式程序模型成为必须</span></p><p><span class=\"ql-size-large\">4. 分布式程序与并发多线程的区别与联系</span></p><p><span class=\"ql-size-large\">5. 操作系统提供的线程间通信机制：共享内存，Mutex临界保护，socket/msg/pipe等</span></p><p><span class=\"ql-size-large\">6. RUST的线程</span></p><p><span class=\"ql-size-large\">7. RUST语言提供的线程间通信：所有权move /通道 /Mutex&lt;T&gt;/Arc&lt;T&gt;本质解读</span></p><p><span class=\"ql-size-large\">8. RUST async/await机制分析</span></p><p><br></p><p><strong class=\"ql-size-large\">项目实践</strong></p><p><span class=\"ql-size-large\">RUST异步编程简易框架搭建</span></p><p><br></p><p><br></p><p><strong class=\"ql-size-large\">学习时间安排：</strong></p><p><span class=\"ql-size-large\">1. 每周二/周四/周六的晚上8点-10点</span></p><p><span class=\"ql-size-large\" style=\"color: rgb(0, 0, 0);\">2. 学习时间共两周，其中第一周侧重内存安全和语法难点，第二周侧重RUST并发编程和异步编程等知识。</span></p><p><br></p><p><strong class=\"ql-size-large\">报名费用说明：</strong></p><p><span class=\"ql-size-large\">1. 课程学费3600元，包含2周共6次课程，每次课程2小时。</span></p><p><span class=\"ql-size-large\">2. 报名缴费后，中途如果放弃学习，则已经发生的课次按每次500元收费，剩余费用退还。</span></p>","applyCount":null,"linkUrl":null,"gradeLevel":null,"courseClasss":null}},"__N_SSG":true}